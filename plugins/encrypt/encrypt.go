package encrypt

import (
	"archive/zip"
	"github.com/abingzo/bups/common/config"
	"github.com/abingzo/bups/common/logger"
	"github.com/abingzo/bups/common/path"
	"github.com/abingzo/bups/common/plugin"
	"io"
	"os"
	"path/filepath"
	"strings"
)

const (
	Name = "encrypt"
	Type = plugin.BHandle
	Self = path.PathBackUpCache + "/" + Name
)

var support = []uint32{plugin.SUPPORT_LOGGER, plugin.SUPPORT_CONFIG_OBJ}

func New() plugin.Plugin {
	return &EncryptAndArchive{}
}

// EncryptAndArchive 加密及归档
type EncryptAndArchive struct {
	config    *config.AutoGenerated
	errorLog  logger.Logger
	accessLog logger.Logger
}

func (e *EncryptAndArchive) SetSource(source *plugin.Source) {
	e.accessLog = source.AccessLog
	e.errorLog = source.ErrorLog
}

func (e *EncryptAndArchive) Start(args []string) {
	// 读取backup备份好的文件
	if err := Zip(path.PathBackUpCache+"/backup", Self+"/backup.zip"); err != nil {
		e.errorLog.Error(err.Error())
		panic(err)
	} else {
		e.accessLog.Info("archive backup.zip successfully")
	}
}

func (e *EncryptAndArchive) Caller(single plugin.Single) {
	// 清理资源
	if err := os.Remove(Self + "/.backup.zip"); err != nil {
		e.errorLog.Error(err.Error())
		panic(err)
	} else {
		e.accessLog.Info("clean sources complete")
	}
}

func (e *EncryptAndArchive) GetName() string {
	return Name
}

func (e *EncryptAndArchive) GetType() plugin.Type {
	return Type
}

func (e *EncryptAndArchive) GetSupport() []uint32 {
	return support
}

// Zip srcFile could be a single file or a directory
// destZip必须为一个正确的文件路径，否则返回错误
func Zip(srcFile string, destZip string) error {
	zipfile, err := os.OpenFile(destZip, os.O_CREATE|os.O_WRONLY, 0777)
	if err != nil {
		return err
	}
	defer zipfile.Close()

	archive := zip.NewWriter(zipfile)
	defer archive.Close()

	return filepath.Walk(srcFile, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		header, err := zip.FileInfoHeader(info)
		if err != nil {
			return err
		}

		header.Name = strings.TrimPrefix(path, filepath.Dir(srcFile)+"/")
		// header.Name = path
		if info.IsDir() {
			header.Name += "/"
		} else {
			header.Method = zip.Deflate
		}

		writer, err := archive.CreateHeader(header)
		if err != nil {
			return err
		}

		if !info.IsDir() {
			file, err := os.Open(path)
			if err != nil {
				return err
			}
			defer file.Close()
			_, err = io.Copy(writer, file)
		}
		return err
	})
}
