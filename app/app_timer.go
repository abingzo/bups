package app

import (
	"github.com/mengzushan/bups/common/conf"
	this "github.com/mengzushan/bups/common/error"
	"github.com/mengzushan/bups/common/upload"
	"github.com/mengzushan/bups/utils"
	"io"
	"os"
	"time"
)

/*
	根据应用程序的定时器状态执行的任务
*/

func TimerTask(config *conf.AutoGenerated) (string,this.Error) {
	// 备份db文件
	BackUpForDb()
	// 创建.sql文件的压缩包
	err := CreateSqlFileZip()
	if err != this.Nil {
		return "",err
	}
	// 创建文件配置文件，并根据配置项压缩备份本地文件
	backupJsonConfig := BackUpForFile()
	if backupJsonConfig == nil {
		return "",this.SetError("Json配置文件读取失败")
	}
	// 读取文件夹内配置文件获取加密配置
	pathHead,_ := os.Getwd()
	// 从文件读取配置,已经废弃
	//cfgPath := "/cache/backup/config.json"
	//file, goErr := os.Open(pathHead + cfgPath)
	//if goErr != nil {
	//	return "",this.SetError(goErr)
	//}
	//fileData,_ := ioutil.ReadAll(file)
	//jsons := ConfigJson{}
	//goErr = json.Unmarshal(fileData, &jsons)
	//if goErr != nil {
	//	return "",this.SetError(goErr)
	//}

	// 是否开启加密
	info, err := encrypt(config, pathHead+"/cache/backup", backupJsonConfig)
	if err != this.Nil {
		return info,this.SetError(err)
	}
	// 将其打包并上传至云端
	// 要上传的文件暂存upload目录
	err,zipName := packFile(pathHead+"/cache/backup", pathHead + "/cache/upload")
	// 打包失败的情况
	if err != this.Nil {
		return "",err
	}
	file, _ := os.Open(pathHead + "/cache/upload" + "/" + zipName)
	err = uploadFile(config, zipName, file)
	if err != this.Nil {
		return "",err
	}
	// 备份完成清理缓存文件
	goErr := os.RemoveAll(pathHead + "/cache/backup")
	if goErr != nil {
		return "",this.SetError(goErr)
	}
	return "",this.Nil
}

func encrypt(config *conf.AutoGenerated,path string,backupConfigJson *ConfigJson) (string,this.Error) {
	// 根据config.json中的选项决定是否开启加密
	if backupConfigJson.Rsa == "off" && backupConfigJson.Aes == "off" {
		return EncryptFile(ENCRYPTOF,config,nil,path).Error(),this.Nil
	} else {
		return "",EncryptFile(ENCRYPTON, config, backupConfigJson,path)
	}
}

// 根据方式打包压缩文件
func packFile(filePath string,zipFilePath string) (this.Error,string) {
	// 压缩文件名
	zipName := time.Now().Format("2006-01-02 15:04:05") + ".zip"
	err := Zip(filePath, zipFilePath+"/"+zipName)
	if err != nil {
		return this.SetError(err),""
	} else {
		return this.Nil,zipName
	}
}

func uploadFile(config *conf.AutoGenerated,fileName string,file io.Reader) this.Error {
	var uf upload.UploadInterface = new(upload.Func)
	ul := uf.Init(config)
	err := ul.SetNewLink()
	if err != this.Nil {
		return err
	}
	err = ul.Push(fileName, file)
	if err != this.Nil {
		return err
	}
	return this.Nil
}

// 按照定义的规则检查配置文件的正确性
func CheckTomlConfig(config *conf.AutoGenerated) this.Error {
	// cloud_api字段只能为空或者cos/COS
	if config.CloudAPI != "" && config.CloudAPI != "COS" && config.CloudAPI != "cos"{
		return this.SetError("{cloud_api} Wrong value for field,Should be on or off")
	}
	// db_name字段不为空的时候，user_name字段和user_passwd字段不能为空
	if config.Database.DbName != "" {
		if config.Database.UserName == "" || config.Database.UserPasswd == "" {
			return this.SetError("When {db_name} is not empty, {user_name} and {user_passwd} cannot be empty")
		}
	}
	// encrypt_mode字段的值只能为on或者off
	// encrypt_mode字段的值为on的时候,aes字段的值不能为空
	if config.Encryption.Switch != "on" && config.Encryption.Switch != "off" {
		return this.SetError("{encrypt_mode} Wrong value for field,Should be on or off")
	} else if config.Encryption.Switch == "on" {
		switch config.Encryption.EncryptMode {
		case "aes":
			if config.Encryption.Aes == "" {
				return this.SetError("When {encryption.switch} is on, {encryption.aes} cannot be empty")
			}
			break
		// 有rsa加密方式则判断密钥是不是合法的路径
		// 使用rsa加密方式的aes_key不能为空
		case "rsa","rsa+aes","aes+rsa":
			if utils.Equal(config.Rsa.PubKey,".pem") == false || utils.Equal(config.Rsa.PriKey,".pem") == false{
				return this.SetError("Illegal key path")
			}
			if config.Encryption.Aes == "" {
				return this.SetError("When {encryption.switch} is on, {encryption.aes} cannot be empty")
			}
			break
		}
	}
	// web_config.switch字段的值只能为on或者off
	if config.WebConfig.Switch != "on" && config.WebConfig.Switch != "off" {
		return this.SetError("{web_config.switch} Wrong value for field,Should be on or off")
	}
	return this.Nil
}