package conf

import (
	"fmt"
	"github.com/BurntSushi/toml"
	"github.com/mengzushan/bups/common/logger"
	"github.com/mengzushan/bups/utils"
	"os"
)

type AutoGenerated struct {
	CloudAPI     string `toml:"cloud_api"`
	SaveName     string `toml:"save_name"`
	SaveTime     int    `toml:"save_time"`
	SaveTimePass int    `toml:"save_time_pass"`
	Bucket       struct {
		BucketURL string `toml:"bucket_url"`
		Secretid  string `toml:"secretid"`
		Secretkey string `toml:"secretkey"`
		Token     string `toml:"token"`
	} `toml:"bucket"`
	Database struct {
		Ipaddr     string `toml:"ipaddr"`
		Port       string `toml:"port"`
		UserName   string `toml:"user_name"`
		UserPasswd string `toml:"user_passwd"`
		DbName     string `toml:"db_name"`
		DbName2    string `toml:"db_name2"`
	} `toml:"database"`
	Local struct {
		Web    string `toml:"web"`
		Static string `toml:"static"`
		Log    string `toml:"log"`
	} `toml:"local"`
	WebConfig struct {
		Switch     string `toml:"switch"`
		Ipaddr     string `toml:"ipaddr"`
		Port       string `toml:"port"`
		UserName   string `toml:"user_name"`
		UserPasswd string `toml:"user_passwd"`
	} `toml:"web_config"`
	Encryption struct {
		Switch      string `toml:"switch"`
		EncryptMode string `toml:"encrypt_mode"`
		Aes         string `toml:"aes"`
	} `toml:"encryption"`
	Rsa struct {
		PubKey string `toml:"pub_key"`
		PriKey string `toml:"pri_key"`
	} `toml:"rsa"`
}

type Con struct {
	devPath string
	proPath string
	prePath string
}

func InitConfig() *AutoGenerated {
	// 读取配置文件
	var conf AutoGenerated
	pathRune := utils.PathRune()
	c := Con{
		devPath: fmt.Sprintf("%sconf%sdev%sapp.conf",pathRune,pathRune,pathRune),
		proPath: fmt.Sprintf("%sconf%spro%sapp.conf",pathRune,pathRune,pathRune),
	}
	pathHead,_ := os.Getwd()
	// 默认dev配置
	if _,err := toml.DecodeFile(pathHead + c.devPath,&conf); err != nil {
		log := logger.Std()
		log.StdErrorLog("读取配置文件失败")
		panic(err)
	}
	return &conf
}
